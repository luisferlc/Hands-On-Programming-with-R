#message(paste('Numeros que salieron: ', throw)) #mensaje de consola
sum(throw)
}
roll()
roll <- function(){
dado <- 1:6
throw <- sample(vector, 2, replace = T)
print("Números que salieron:")
print(throw)
#print(paste0('Numeros que salieron: ', throw))
#message(paste('Numeros que salieron: ', throw)) #mensaje de consola
sum(throw)
}
roll()
install.packages('ggplot2')
library('ggplot2')
roll <- function() {
dice <- 1:6
throw <- sample(dice, 2, replace = T)
sum(throw)
}
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
replicate(10,roll())
rolls <- replicate(1000, roll())
qplot(rolls)
qplot(rolls, binwidth = 1)
qplot(rolls, binwidth = 2)
qplot(rolls, binwidth = 3)
qplot(rolls, binwidth = 5)
qplot(rolls, binwidth = 1)
args(sample)
?sample
roll_w <- function() {
dice <- 1:6
prob_w <- c(1/8,1/8,1/8,1/8,1/8,3/8)
throw <- sample(dice, 2, replace = T, prob = prob_w)
sum(throw)
}
rolls <- replicate(1000, roll_w())
qplot(rolls, binwidth = 1)
x <- 5
y <- c(1,2,3,45555)
is.vector(x)
is.vector(x), is.vector(y)
is.vector(y)
length(x)
length(y)
#Por default, R guarda como doubles los números en los vectoers
typeof(x)
#Guardando integers
x_2 <- c(1L,2L,42L)
typeof(x_2)
#Probando cosillas
x_3 <- c(1L,2,42L)
typeof(x_3)
#floating-point arithmetic
sqrt(2)-2
#floating-point arithmetic
sqrt(2)^-2
#floating-point arithmetic
sqrt(2)^2 - 2
typeof(x_3)
raw(3)
raw(2)
raw(123)
array(c(1,2,3,4,5,6), dim(c(2,3)))
array(c(1,2,3,4,5,6), dim = c(2,3))
matrix(c(1,2,3,4,5,6), nrow=2)
matrix(c(1,2,3,4,5,6), nrow=2, byrow=T)
vector <- c(1,2,3,4,5,6)
dim(vector)
dim(vector) <- c(2,3)
vector
#Creando una matriz para una flor imperial
flor_imperial <- c('as','rey','reina','jota','diez')
dim(flor_imperial)
dim(flor_imperial) <- c('espadas','espadas','espadas','espadas','espadas')
dim(flor_imperial)
dim(flor_imperial) <- c('espadas','espadas','espadas','espadas','espadas')
#Creando una matriz para una flor imperial
flor_imperial <- c('as','rey','reina','jota','diez','espadas','espadas','espadas','espadas','espadas')
dim(flor_imperial)
dim(flor_imperial) <- c(5,2)
flor_imperial
get_symbols <- function() {
wheel <- c("DD","7","BBB","BB","B","C","0")
sample(wheel, size=3, replace = T,
prob = c(0.03,0.03,0.06,0.1,0.25,0.01,0.52))
}
get_symbols
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
#1.- Checar si todos los elementos del vector son iguales:
get_symbols()
#1.- Checar si todos los elementos del vector son iguales:
x <- c("7","7","7")
all(x, x[1])
all(x == x[1])
?all
#2.- checar precio del vector anterior donde todos los simbolos son iguales
###
#3.- checar si todos son barras
x <- ("B","B","BBB")
all(x %in% c("B","BB","BBB"))
#2.- checar precio del vector anterior donde todos los simbolos son iguales
###
#3.- checar si todos son barras
x <- ("B","B","BBB")
#2.- checar precio del vector anterior donde todos los simbolos son iguales
###
#3.- checar si todos son barras
x <- c("B","B","BBB")
all(x %in% c("B","BB","BBB"))
length("C" %in% x)
#2.- checar precio del vector anterior donde todos los simbolos son iguales
pays <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0) #esta es la manera de crear un diccionario asi como en Python
pays["BB"]
typeof(pays["BB"])
pays["BB"] + 1
xx<-pays["BB"]
xx
xx<-unname(pays["BB"])
xx
length("C" %in% x)
################################
################################
#5.- contar el número de cherries
x <- c("B","C","C")
length("C" %in% x)
sum(x == "C")
#6.-calcular el precio de los cherries
c(0,2,5)[1]
cherries=sum(x == "C")
#6.-calcular el precio de los cherries
c(0,2,5)[cherries]
#6.-calcular el precio de los cherries
c(0,2,5)[cherries + 1]
################################
################################
#7.- contar diamantes
x <- c("DD","BB","C")
diamantes=sum(x == "DD")
diamantes
#8.- dobletear premio si es necesario
pays * 2 ^ diamantes
all(x == x[1])
#1.- Checar si todos los elementos del vector son iguales:
x <- c("7","7","7")
all(x == x[1])
all(x == x[1])
#2.- checar precio del vector anterior donde todos los simbolos son iguales
pays <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0) #esta es la manera de crear un diccionario asi como en Python
xx<-unname(pays[x[1]])
xx
premios <- function() {
if (all(simbolos == simbolos[1])){
pays <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0) #diccionario de premios
premio <- unname(pays[simbolos[1]])
}
else if (all(simbolos %in% c("B","BB","BBB"))){
premio <- 5
}
else {
cherries=sum(simbolos == "C")
premio <- c(0,2,5)[cherries + 1]
}
diamantes=sum(simbolos == "DD")
premio <- 2 ^ diamantes
}
play <- function() {
simbolos <- get_symbols() #1.-generas tu jugada, 3 simbolos aparecen en pantalla
print(simbolos) #2.-imprimes los simbolos que sacaste
premios()
}
play()
########### CREANDO PLAY ####################
play <- function() {
simbolos <- get_symbols() #1.-generas tu jugada, 3 simbolos aparecen en pantalla
print(simbolos) #2.-imprimes los simbolos que sacaste
premios(simbolos)
}
premios <- function(s) {
if (all(simbolos == simbolos[1])){
pays <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0) #diccionario de premios
premio <- unname(pays[simbolos[1]])
}
else if (all(simbolos %in% c("B","BB","BBB"))){
premio <- 5
}
else {
cherries=sum(simbolos == "C")
premio <- c(0,2,5)[cherries + 1]
}
diamantes=sum(simbolos == "DD")
premio <- 2 ^ diamantes
}
play()
play <- function() {
simbolos <- get_symbols() #1.-generas tu jugada, 3 simbolos aparecen en pantalla
print(simbolos) #2.-imprimes los simbolos que sacaste
premios(simbolos)
}
play()
premios <- function(s) {
if (all(s == s[1])){
pays <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0) #diccionario de premios
premio <- unname(pays[s[1]])
}
else if (all(s %in% c("B","BB","BBB"))){
premio <- 5
}
else {
cherries=sum(s == "C")
premio <- c(0,2,5)[cherries + 1]
}
diamantes=sum(s == "DD")
premio <- 2 ^ diamantes
}
play()
premios <- function(s) {
if (all(s == s[1])){
pays <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0) #diccionario de premios
premio <- unname(pays[s[1]])
}
else if (all(s %in% c("B","BB","BBB"))){
premio <- 5
}
else {
cherries=sum(s == "C")
premio <- c(0,2,5)[cherries + 1]
}
diamantes=sum(s == "DD")
premio <- 2 ^ diamantes
}
play()
play()
play()
play()
play()
premios <- function(s) {
if (all(s == s[1])){
pays <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0) #diccionario de premios
premio <- unname(pays[s[1]])
}
else if (all(s %in% c("B","BB","BBB"))){
premio <- 5
}
else {
cherries=sum(s == "C")
premio <- c(0,2,5)[cherries + 1]
}
diamantes=sum(s == "DD")
premio <- 2 ^ diamantes
premio
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
premios <- function(s) {
if (all(s == s[1])){
pays <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0) #diccionario de premios
premio <- unname(pays[s[1]])
}
else if (all(s %in% c("B","BB","BBB"))){
premio <- 5
}
else {
cherries<-sum(s == "C")
premio <- c(0,2,5)[cherries + 1]
}
diamantes<-sum(s == "DD")
premio <- 2 ^ diamantes
premio
}
play()
play()
play()
play()
play()
premios <- function(s) {
if (all(s == s[1])){
pays <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0) #diccionario de premios
premio <- unname(pays[s[1]])
}
else if (all(s %in% c("B","BB","BBB"))){
premio <- 5
}
else {
cherries<-sum(s == "C")
premio <- c(0,2,5)[cherries + 1]
}
diamantes<-sum(s == "DD")
premio * 2 ^ diamantes
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
getwd()
setwd('D:/Documentos/R Projects/Hands-On Programming with R/project2')
deck <- read.table('deck.csv', sep = ",", header = T)
attributes(deck)
#1.- Atributos: las variables pueden tener atributos, que son información extra que puede ser de ayuda, como sus "metadatos".
attributes(deck)
levels(deck)
levels(deck$face)
levels(deck$suit)
play()
one_play <- play()
one_play
one_play
attributes(one_play)
attr(one_play, 'symbols') <- c("B","0","B")
attributes(one_play)
attr(one_play, 'symbols')
one_play
play()
play <- function() {
simbolos <- get_symbols() #1.-generas tu jugada, 3 simbolos aparecen en pantalla
premio <- premios(simbolos)
attr(premio, 'simbolos') <- simbolos
premio
}
play()
play()
play()
two_play<-play()
two_play
?structure
play <- function() {
simbolos <- get_symbols() #1.-generas tu jugada, 3 simbolos aparecen en pantalla
premio <- premios(simbolos)
structure(premios(simbolos), symbols = simbolos)
}
play()
third_play<-play()
third_play
two_play
attr(premio, 'symbols')
third_play
slot_display <- function(a_play) {
symbols <- attr(a_play, 'symbols') #extraes los distintos valores del atributo 'symbols'
symbols <- paste(symbols, collapse = " ") #crear 1 string con estos valores separados por un espacio
string <- paste(symbols, a_play, sep = "\n$") #por último unes el string symbols con el valor de tu parámetro (a_play) que es el valor de play(), el dinero que ganaste
cat(string)
}
slot_display(play())
slot_display(play())
slot_display(play())
slot_display(play())
num <- 1000
print(num)
class(num) <- c("POSIXct", "POSIXt")
print(num)
print(num)
num <- 1000
print(num)
class(num) <- c("POSIXct", "POSIXt")
print(num)
methods(print)
deck
class
